/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

declare module "src/helpers/index" {
  declare export function toId(navigator: string, scene: string): string;

  declare export function fromId(id: string): string[];
}

declare module "src/Value/index" {
  declare export default class Value {
    static EVENTS: {
      WILL_VALUE: string,
      VALUE: string,
      ...
    };

    /**
     * @param {string} name
     * @param {number} [value]
     * @param {number} [duration]
     */
    constructor(
      name: string,
      value?: number | void,
      duration?: number | void
    ): this;
    __id: number;
    name: string;
    value: number;
    duration: number;

    /**
     * @param {string} eventName
     * @param {any} args
     */
    emit: (eventName: string, args: any) => void;

    /**
     * @param {string} eventName
     * @param {Function} fn
     */
    on: (eventName: string, fn: Function) => void;

    /**
     * @param {string} eventName
     * @param {Function} fn
     */
    off: (eventName: string, fn: Function) => void;

    /**
     * @param {number} value
     * @param {number} [duration]
     */
    to: (value: number, duration?: number | void) => Promise<any>;
  }
}

declare module "src/Base/Scene" {
  declare export default class Scene {
    /**
     * @param {string} name
     */
    constructor(name: string): this;

    /**
     * @property {string} name
     */
    name: string;
    active: Value;

    /**
     * @param {number} duration
     */
    show: (duration: number) => Promise<any>;

    /**
     * @param {number} duration
     */
    hide: (duration: number) => Promise<any>;
  }
  import typeof Value from "src/Value";
}

declare module "src/Base/Navigator" {
  /**
   * @typedef {$PropertyType<$Exports<"./Scene">, "default">} Scene
   */
  declare export default class Navigator {
    /**
     * @param {string} name
     */
    constructor(name: string): this;
    name: string;

    /**
 * @type {{
[key: string]: _default$Scene,...
}}
 */
    scenes: {
      [key: string]: _default$Scene,
      ...
    };

    /**
     * @type {Array<string>}
     */
    history: Array<string>;

    /**
     * @param {..._default$Scene} scenes
     */
    addScenes: (
      ...scenes: $PropertyType<$Exports<"src/Base/Scene">, "default">[]
    ) => void;
    current: () => string;

    /**
     * @param {string} name
     * @param {number} duration
     */
    go: (name: string, duration: number) => Promise<void>;

    /**
     * @param {number} duration
     */
    back: (duration: number) => Promise<void>;
    reset: () => Promise<void>;
  }
  declare export type Scene = $PropertyType<
    $Exports<"src/Base/Scene">,
    "default"
  >;
}

declare module "src/Navigation/index" {
  /**
   * @typedef {$PropertyType<$Exports<"../Base/Navigator">, "default">} Navigator
   */
  declare export class Navigation {
    static EVENTS: {
      LOCK: string,
      UNLOCK: string,
      WILL_BLUR: string,
      BLUR: string,
      WILL_FOCUS: string,
      FOCUS: string,
      ANDROID_BACK: string,
      ...
    };

    /**
 * @type {{
[name: string]: _default$Navigator,...
}}
 */
    navigators: {
      [name: string]: _default$Navigator,
      ...
    };

    /**
     * @type {Array<string>}
     */
    history: Array<string>;
    locked: boolean;
    lockCounter: number;

    /**
     * @param {string} eventId
     * @param {Function} fn
     */
    on: (eventId: string, fn: Function) => void;

    /**
     * @param {string} eventId
     * @param {Function} fn
     */
    once: (eventId: string, fn: Function) => void;

    /**
     * @param {string} eventId
     * @param {Function} fn
     */
    off: (eventId: string, fn: Function) => void;

    /**
     * @param {string} eventId
     * @param {any} [args]
     */
    emit: (eventId: string, args?: any) => void;

    /**
     * @param {..._default$Navigator} navigators
     */
    addNavigators: (
      ...navigators: $PropertyType<$Exports<"src/Base/Navigator">, "default">[]
    ) => void;
    lock: () => void;
    unlock: () => void;
    wait: () => Promise<any>;

    /**
     * @param {string} navigatorName
     * @param {string} sceneName
     * @param {number} duration
     */
    go: (
      navigatorName: string,
      sceneName: string,
      duration: number
    ) => Promise<void>;

    /**
     * @param {string} navigatorName
     */
    push: (navigatorName: string) => void;

    /**
     * @param {string} navigatorName
     * @param {number} duration
     */
    back: (navigatorName: string, duration: number) => Promise<void>;
    reset: () => Promise<void[]>;
    current: () => string;

    /**
     * @param {string} id
     */
    androidBack: (id: string) => void;
    id: () => string | void;
  }
  declare var _default: Navigation;
  declare export default typeof _default;

  declare export type Navigator = $PropertyType<
    $Exports<"src/Base/Navigator">,
    "default"
  >;
}

declare module "src/Base/index" {
  declare export { Navigator };

  declare export { Scene };

  declare export default typeof _default;

  import typeof Navigator from "src/Base/Navigator";

  import typeof Scene from "src/Base/Scene";
}

declare module "@navigationjs/core" {
  declare export default typeof navigation;

  import type { Navigation } from "src/Navigation";

  import typeof Base from "src/Base";

  import typeof Value from "src/Value";

  import type { toId } from "src/helpers";

  import type { fromId } from "src/helpers";

  import typeof navigation from "src/Navigation";

  declare export { Navigation, Base, Value, toId, fromId };
}
