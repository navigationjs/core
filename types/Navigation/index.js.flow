/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 * @flow
 */

declare var EVENTS: typeof npm$namespace$EVENTS;

declare var npm$namespace$EVENTS: {|
  LOCK: typeof EVENTS$LOCK,
  UNLOCK: typeof EVENTS$UNLOCK,
  ID: typeof EVENTS$ID
|};
declare export var EVENTS$LOCK: string;

declare export var EVENTS$UNLOCK: string;

declare export var EVENTS$ID: string;
/**
 * @typedef {$PropertyType<$Exports<"../Base/Navigator">, "default">} Navigator
 */
declare export class Navigation {
  /**
 * @type {{
[name: string]: Navigator,...
}}
 */
  navigators: {
    [name: string]: Navigator,
    ...
  };

  /**
   * @type {History}
   */
  history: History;
  locked: boolean;
  lockCounter: number;

  /**
   * @param {string} eventId
   * @param {Function} fn
   */
  on: (eventId: string, fn: Function) => void;

  /**
   * @param {string} eventId
   * @param {Function} fn
   */
  once: (eventId: string, fn: Function) => void;

  /**
   * @param {string} eventId
   * @param {Function} fn
   */
  off: (eventId: string, fn: Function) => void;

  /**
   * @param {string} eventId
   * @param {any} [args]
   */
  emit: (eventId: string, args?: any) => void;

  /**
   * @param {...Navigator} navigators
   */
  addNavigators: (
    ...navigators: $PropertyType<$Exports<"../Base/Navigator">, "default">[]
  ) => void;

  /**
   * @param {...string} navigators
   */
  removeNavigators: (...navigators: string[]) => void;
  lock: () => void;
  unlock: () => void;
  wait: () => Promise<any>;

  /**
   * @param {string} navigatorName
   */
  push: (navigatorName: string) => void;
  pop: () => void;

  /**
   * @param {string} navigatorName
   * @param {string} sceneName
   * @param {number} duration
   */
  go: (
    navigatorName: string,
    sceneName: string,
    duration: number
  ) => Promise<void>;

  /**
   * @param {number} duration
   */
  back: (duration: number) => Promise<void>;
  reset: () => Promise<void[]>;
  current: () => string;
  id: () => string | void;

  /**
   * @param {string} id
   * @param {string} navigatorName
   */
  pass: (id: string, navigatorName: string) => void;

  /**
   * @type {string | void}
   */
  __id: string | void;
  __onHistoryChange: () => void;
}
declare var _default: Navigation;
declare export default typeof _default;
export type Navigator = $PropertyType<$Exports<"../Base/Navigator">, "default">;
import History from "../History";
